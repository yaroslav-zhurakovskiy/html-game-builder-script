public class MintegralBanner: SandboxObject {
    <% if !@MintegralBannerAdUnitID.nil? %>
    private static let defaultAdUnitID: String? = "<%= @MintegralBannerAdUnitID %>"
    <% else %>
    private static let defaultAdUnitID: String? = nil
    <% end %>

    <% if !@MintegralBannerSize.nil? %>
    private static let defaultSize: String? = "<%= @MintegralBannerSize %>"
    <% else %>
    private static let defaultSize: String? = nil
    <% end %>

    <% if !@MintegralBannerPlacement.nil? %>
    private static let defaultPlacement: BannerPlacement? = .<%= @MintegralBannerPlacement %>
    <% else %>
    private static let defaultPlacement: BannerPlacement? = nil
    <% end %>
    

    enum Method: String {
        case show
        case hide
    }
    
    enum Argument: String, Hashable {
        case size
        case unitID
        case placement
        case autoRefreshTime
    }
    
    private let presenter = MTGBannerAdViewPresenter()
    
    func invoke(
        _ method: String,
        with args: [String : Any],
        from viewController: WebGameController
    ) {
      
        guard let result: (Method, [Argument: String]) = convertToTypedValues(method: method, arguments: args) else {
            return
        }
        
        let (method, input) = result
    
            
        switch method {
        case .show:
           show(from: viewController, with: input)
        case .hide:
            presenter.dismiss()
        }
    }
    
    private func show(from viewController: UIViewController, with input: [Argument: String]) {
        if let unitID = input[.unitID]{
            presenter.present(
                from: viewController,
                size: resolveSize(input: input),
                placement: resolvePlacement(input: input).rawValue,
                autoRefreshTime: resolveAutorefresh(input: input),
                unitID: unitID
            )
        } else if let unitID = Self.defaultAdUnitID {
            presenter.present(
                from: viewController,
                size: resolveSize(input: input),
                placement: resolvePlacement(input: input).rawValue,
                autoRefreshTime: resolveAutorefresh(input: input),
                unitID: unitID
            )
        }
    }
    
    private func resolveAutorefresh(input: [Argument: String]) -> NSNumber? {
        if let value = input[.autoRefreshTime] {
            let formatter = NumberFormatter()
            return formatter.number(from: value)
        } else {
            return nil
        }
    }
    
    private func resolveSize(input: [Argument: String]) -> MTGBannerSizeType {
        if let size = input[.size] {
            return convertSizeStringToBannerSizeType(size)
        }
        
        if let size = Self.defaultSize {
            return convertSizeStringToBannerSizeType(size)
        } else {
            return .smartBannerType
        }
    }
    
    private func resolvePlacement(input: [Argument: String]) -> BannerPlacement {
        if let placement = input[.placement] {
            switch placement {
            case "top":
                return .top
            case "bottom":
                return .bottom
            default:
                return .top
            }
        }
        
        return Self.defaultPlacement ?? .top
    }
    
    private func convertSizeStringToBannerSizeType(_ size: String) -> MTGBannerSizeType {
        let typeMap: [String: MTGBannerSizeType] = [
            "mediumRectangularBanner300x250": .mediumRectangularBanner300x250,
            "largeBannerType320x90": .largeBannerType320x90,
            "smartBannerType": .smartBannerType,
            "standardBannerType320x50": .standardBannerType320x50
        ]
        
        return typeMap[size] ?? .smartBannerType
    }
}