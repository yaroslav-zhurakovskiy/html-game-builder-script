import UIKit
import WebKit

protocol WebGameControllerDelegate: class {
    func webGameWilLoad(_ controller: WebGameController)
    func webGameConroller(_ controller: WebGameController, didReceiveRequest: SandboxObjectRequest)
    func viewWillTransition(_ view: UIView, to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator)
    func viewDidLayoutSubviews(_ view: UIView)
}

class WebGameController: UIViewController {
    @IBOutlet weak var webView: WKWebView!
    
    private let rootURL: URL
    private let startingPage: String
    private let decompser = SandboxURLRequestDecomposer()
    
    weak var delegate: WebGameControllerDelegate?
    
    init(rootURL: URL, startingPage: String) {
        self.rootURL = rootURL
        self.startingPage = startingPage
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
   override func viewDidLoad() {
        super.viewDidLoad()
        
        webView.scrollView.isScrollEnabled = false
        webView.navigationDelegate = self
        webView.uiDelegate = self
        webView.configuration.preferences.setValue(true, forKey: "allowFileAccessFromFileURLs")
        webView.configuration.setValue(true, forKey: "allowUniversalAccessFromFileURLs");
        
        
        delegate?.webGameWilLoad(self)
        
        webView.loadFileURL(rootURL.appendingPathComponent(startingPage), allowingReadAccessTo: rootURL)
        
    <% if @autoshowBanner %>
        let request = SandboxObjectRequest(object: sandboxAdObjectSystemName, method: "showBanner", arguments: [:])
        delegate?.webGameConroller(self, didReceiveRequest: request)
    <% end %>
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        delegate?.viewWillTransition(view, to: size, with: coordinator)
    }

    override func viewDidLayoutSubviews() {
        delegate?.viewDidLayoutSubviews(view)
    }
}

extension WebGameController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
        print(error)
    }
    
    func webView(
        _ webView: WKWebView,
        decidePolicyFor navigationAction: WKNavigationAction,
        decisionHandler: @escaping (WKNavigationActionPolicy) -> Void
    ) {
        guard
            decompser.isSandboxRequest(navigationAction.request),
            let request = decompser.decomposeRequest(navigationAction.request)
        else {
            decisionHandler(.allow)
            return
        }

        delegate?.webGameConroller(self, didReceiveRequest: request)
        decisionHandler(.cancel)
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        
    }
    
    func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error) {
        print(error)
    }
}


extension WebGameController: WKUIDelegate {
    
}

extension WebGameController {
    func request(_ request: SandboxObjectRequest) {
        delegate?.webGameConroller(self, didReceiveRequest: request)
    }
}
