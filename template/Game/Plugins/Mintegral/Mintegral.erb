class Mintegral: SandboxAdObject {
    <% if !@MintegralVideoAdUnitID.nil? %>
    private static let videoInterstitialDefaultAdUnitID: String? = "<%= @MintegralVideoAdUnitID %>"
    <% else %>
    private static let videoInterstitialDefaultAdUnitID: String? = nil
    <% end %>

    <% if !@MintegralInterstitialAdUnitID.nil? %>
    private static let staticInterstitialDefaultAdUnitID: String? = "<%= @MintegralInterstitialAdUnitID %>"
    <% else %>
    private static let staticInterstitialDefaultAdUnitID: String? = nil
    <% end %>
    
    <% if !@MintegralSplashAdUnitID.nil? %>
    private static let defaultSplashAdUnitID: String? = "<%= @MintegralSplashAdUnitID %>"
    <% else %>
    private static let defaultSplashAdUnitID: String? = nil
    <% end %>
    <% if !@MintegralSplashAdCountdown.nil? %>
    private static let defaultSplashAdCountdown: String? = "<%= @MintegralSplashAdCountdown %>"
    <% else %>
    private static let defaultSplashAdCountdown: String? = nil
    <% end %>
    <% if !@MintegralSplashAdAllowSkip.nil? %>
    private static let defaultSplashAdAllowSkip: String? = "<%= @MintegralSplashAdAllowSkip %>"
    <% else %>
    private static let defaultSplashAdAllowSkip: String? = nil
    <% end %>

    <% if !@MintegralRewardedVideoRewardID.nil? %>
    private static let defaultRewardedVideoRewardID: String? = "<%= @MintegralRewardedVideoRewardID %>"
    <% else %>
    private static let defaultRewardedVideoRewardID: String? = nil
    <% end %>

    <% if !@MintegralRewardedVideoAdUnitID.nil? %>
    private static let defaultRewardedVideoAdUnitID: String? = "<%= @MintegralRewardedVideoAdUnitID %>"
    <% else %>
    private static let defaultRewardedVideoAdUnitID: String? = nil
    <% end %>
    
    <% if !@MintegralRewardedVideoUserID.nil? %>
    private static let defaultRewardedVideoUserID: String? = "<%= @MintegralRewardedVideoUserID %>"
    <% else %>
    private static let defaultRewardedVideoUserID: String? = nil
    <% end %>
    
    enum Method: String {
        case showVideoInterstitial
        case showStaticInterstitial
        case showBanner
        case hideBanner
        case showSplash
        case showRewardedVideo
    }
    
    enum Argument: String, Hashable {
        case unitID
        case size
        case autoRefreshTime
        case countdown
        case allowSkip
        case rewardID
        case userID
    }
    
    private let interstitialVideoAdPresenter = MTGInterstitialVideoAdPresenter()
    private let interstitialStaticAdPresenter = MTGInterstitialAdPresenter()
    private let bannerPresenter = MintegralBanner()
    private let splashPresenter = MTGSplashAdPresenter()
    private let rewardedVideoPresenter = MTGRewardedVideoPresenter()
    
    func invoke(_ method: String, with args: [String : Any], from viewController: WebGameController) {
        guard let result: (Method, [Argument: String]) = convertToTypedValues(method: method, arguments: args) else {
            return
        }
        
        let (method, input) = result
        let callbacks = extractCallbacksObjc(fromArguments: args)
        
        switch method {
        case .showVideoInterstitial:
            if let unitID = input[.unitID] {
                interstitialVideoAdPresenter.present(from: viewController, unitID: unitID, callbacks: callbacks)
            } else if let unitID = Self.videoInterstitialDefaultAdUnitID {
                interstitialVideoAdPresenter.present(from: viewController, unitID: unitID, callbacks: callbacks)
            }
        case .showStaticInterstitial:
            if let unitID = input[.unitID] {
                interstitialStaticAdPresenter.present(from: viewController, unitID: unitID, callbacks: callbacks)
            } else if let unitID = Self.staticInterstitialDefaultAdUnitID {
                interstitialStaticAdPresenter.present(from: viewController, unitID: unitID, callbacks: callbacks)
            }
        case .showBanner:
            bannerPresenter.invoke(MintegralBanner.Method.show.rawValue, with: args, from: viewController)
        case .hideBanner:
            bannerPresenter.invoke(MintegralBanner.Method.hide.rawValue, with: args, from: viewController)
        case .showSplash:
            if
                let unitID = input[.unitID] ?? Self.defaultSplashAdUnitID,
                let countdownStr = input[.countdown] ?? Self.defaultSplashAdCountdown,
                let countdown = UInt(countdownStr),
                let allowSkipStr = input[.allowSkip] ?? Self.defaultSplashAdAllowSkip,
                let allowSkip = Bool(allowSkipStr)
            {
                splashPresenter.present(
                    from: viewController,
                    unitID: unitID,
                    countdown: countdown,
                    allowSkip: allowSkip,
                    callbacks: callbacks
                )
            }
        case .showRewardedVideo:
            if
                let unitID = input[.unitID] ?? Self.defaultRewardedVideoAdUnitID,
                let rewardId = input[.rewardID] ?? Self.defaultRewardedVideoRewardID,
                let userID = input[.userID] ?? Self.defaultRewardedVideoUserID
            {
                rewardedVideoPresenter.present(
                    from: viewController,
                    unitID: unitID,
                    rewardId: rewardId,
                    userId: userID,
                    callbacks: callbacks
                )
            }
        }
    }
}

extension Mintegral {
    func showVideo(args: [String : Any], from viewController: WebGameController) {
        invoke(
            Method.showVideoInterstitial.rawValue,
            with: args,
            from: viewController
        )
    }
    
    func showBanner(args: [String : Any], from viewController: WebGameController) {
        invoke(
            Method.showBanner.rawValue,
            with: args,
            from: viewController
        )
    }
    
    func showInterstitial(args: [String : Any], from viewController: WebGameController) {
        invoke(
            Method.showStaticInterstitial.rawValue,
            with: args,
            from: viewController
        )
    }
    
    func showSplash(args: [String : Any], from viewController: WebGameController) {
        invoke(Method.showSplash.rawValue, with: args, from: viewController)
    }
}
