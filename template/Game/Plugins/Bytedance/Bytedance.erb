import Foundation
import BUAdSDK

class Bytedance: SandboxAdObject {
    <% if !@BytedanceBannerAdUnitID.nil? %>
    private static let defaultBannerAdUnitID: String? = "<%= @BytedanceBannerAdUnitID %>"
    <% else %>
    private static let defaultBannerAdUnitID: String? = nil
    <% end %>
    <% if !@BytedanceBannerSize.nil? %>
    private static let defaultBannerSize: BUProposalSize? = .banner<%= @BytedanceBannerSize %>
    <% else %>
    private static let defaultBannerSize: BUProposalSize? = nil
    <% end %>
    <% if !@BytedanceBannerPlacement.nil? %>
    private static let defaultBannerPlacement: BannerPlacement? = .<%= @BytedanceBannerPlacement %>
    <% else %>
    private static let defaultBannerPlacement: BannerPlacement? = nil
    <% end %>

    <% if !@BytedanceVideoAdUnitID.nil? %>
    private static let defaultVideoAdUnitID: String? = "<%= @BytedanceVideoAdUnitID %>"
    <% else %>
    private static let defaultVideoAdUnitID: String? = nil
    <% end %>
    
    <% if !@BytedanceRewardedVideoAdUnitID.nil? %>
    private static let defaultRewardedAdUnitID: String? = "<%= @BytedanceRewardedVideoAdUnitID %>"
    <% else %>
    private static let defaultRewardedAdUnitID: String? = nil
    <% end %>
    
    enum Method: String {
        case showVideo
        case showBanner
        case showRewarded
    }
    
    enum Argument: String, Hashable {
        case adUnitID
        case size
        case placement
    }
    
    private let bannerPresenter = BytedanceBannerPresenter()
    private let videoPresenter = BytedanceVideoPresenter()
    private let rewardedVideoPresenter = BytedanceRewardedPresenter()
    
    func invoke(_ method: String, with args: [String : Any], from viewController: WebGameController) {
     
        guard let result: (Method, [Argument: String]) = convertToTypedValues(method: method, arguments: args) else {
            return
        }
        
        let (method, input) = result
        let callbacks = extractCallbacks(fromArguments: args)
        
        switch method {
        case .showBanner:
            if let unitID = input[.adUnitID] {
                bannerPresenter.present(
                    withSlotID: unitID,
                    size: resolveBannerSize(input: input),
                    placement: resolvePlacement(input: input),
                    from: viewController,
                    callbacks: callbacks
                )
            } else if let unitID = Self.defaultBannerAdUnitID {
                bannerPresenter.present(
                    withSlotID: unitID,
                    size: resolveBannerSize(input: input),
                    placement: resolvePlacement(input: input),
                    from: viewController,
                    callbacks: callbacks
                )
            }
        case .showVideo:
            if let unitID = input[.adUnitID] {
                videoPresenter.present(withSlotID: unitID, from: viewController, callbacks: callbacks)
            } else if let unitID = Self.defaultVideoAdUnitID {
                videoPresenter.present(withSlotID: unitID, from: viewController, callbacks: callbacks)
            }
        case .showRewarded:
            if let unitID = input[.adUnitID] {
                rewardedVideoPresenter.present(withSlotID: unitID, from: viewController, callbacks: callbacks)
            } else if let unitID = Self.defaultRewardedAdUnitID {
                rewardedVideoPresenter.present(withSlotID: unitID, from: viewController, callbacks: callbacks)
            }
        }
    }
    
    private func resolveBannerSize(input: [Argument: String]) -> BUProposalSize {
        if let value = Self.defaultBannerSize {
            return value
        }
        
        guard let value = input[.size] else {
            return .banner600_90
        }
        
        switch value {
        case "600_90":
            return .banner600_90
        case "600_100":
            return .banner600_100
        case "600_150":
            return .banner600_150
        case "600_260":
            return .banner600_260
        case "600_286":
            return .banner600_286
        case "600_300":
            return .banner600_300
        case "600_388":
            return .banner600_388
        case "600_400":
            return .banner600_400
        default:
            return .banner600_90
        }
    }
    
    private func resolvePlacement(input: [Argument: String]) -> BannerPlacement {
        if let value = Self.defaultBannerPlacement {
            return value
        }
        
        guard let value = input[.placement] else {
            return .top
        }
        
        switch value {
        case "top":
            return .top
        case "bottom":
            return .bottom
        default:
            return .top
        }
    }
}

extension Bytedance {
    func showVideo(args: [String : Any], from viewController: WebGameController) {
        invoke(
            Method.showVideo.rawValue,
            with: args,
            from: viewController
        )
    }
    
    func showBanner(args: [String : Any], from viewController: WebGameController) {
        invoke(
            Method.showBanner.rawValue,
            with: args,
            from: viewController
        )
    }
    
    func showSplash(args: [String : Any], from viewController: WebGameController) {
        invoke(
            Method.showRewarded.rawValue,
            with: args,
            from: viewController
        )
    }

    func showInterstitial(args: [String : Any], from viewController: WebGameController) {
        // Do nothing
    }
}
