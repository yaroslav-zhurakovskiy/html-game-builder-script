#!/usr/bin/ruby

require 'fileutils'
require 'erb'
require 'yaml'
require "pp"
require 'optparse'

SCRIPT_NAME = 'sandbox-build'

class AppFileInput
    def initialize(params)
        @bundle_id=params[:bundleId]

        if params.key?(:fastlane)
            fastlane = params[:fastlane]

            @apple_id=fastlane["appleID"]
            @team_id=fastlane["teamID"]
            @itc_team_id=fastlane["itcTeamID"]
        end
    end

    def get_binding
        return binding()
    end
end


class PluginFileInput
    def initialize(params)
        @GADAdUnitID = params[:GADAdUnitID]
        @MintegralVideoAdUnitID = params[:MintegralVideoAdUnitID]
        @MintegralBannerAdUnitID = params[:MintegralBannerAdUnitID]
        @MintegralBannerSize = params[:MintegralBannerSize]
    end

    def get_binding
        return binding()
    end
end


class AppDelegateInput
    def initialize(params)
        @MintegralApiKey = params[:MintegralApiKey]
        @MintegralAppID = params[:MintegralAppID]
        @BytedanceAppID = params[:BytedanceAppID]
    end

    def get_binding
        binding
    end
end


class ERBCompiler
    def compile(params)
        erb_file_path = params[:erb_file_path]
        result_file_path = params[:result_file_path]
        input = params[:input]
        
        template_text = File.read(erb_file_path)
        template_binding = input.get_binding()
        result = ERB.new(template_text).result(template_binding)
        
        File.write(result_file_path, result)
        File.delete(erb_file_path)
    end
end


class InfoPlistInput
    def initialize(params)
        @GADApplicationIdentifier=params[:GADApplicationIdentifier]
        @bundle_id=params[:bundleId]
        @version=params[:version]
        @build=params[:buildNumber]
        @bundle_name=params[:name]
    end

    def get_binding
        return binding()
    end
end


class PofileInput
    attr_reader :google_ads
    attr_reader :mintegral_ads
    attr_reader :bytedance_ads

    def initialize(params)
        @ios_sdk_version = params[:sdk]
        @target_name = "Game"
        @google_ads = params.key?(:GADApplicationIdentifier)
        @mintegral_ads = params.key?(:MintegralApiKey) && params.key?(:MintegralAppID)
        @bytedance_ads = params.key?(:BytedanceAppID)
    end

    def get_binding
        return binding()
    end
end


class XcodeProjectGenerator
    def regenerate(params)
        clean(params)
        generate(params)
    end

    def clean(params) 
        xcodeProjectOutDir = get_xcode_project_out_dir(params)
        system("rm -fr #{xcodeProjectOutDir}")
    end

    def generate(params)  
        copy_files(params)
        compile_templates(params)
        generate_xcode_project(params)
        install_pods(params)
    end

    private def copy_files(params)
        copy_template(params)
        delete_unused_plugins(params)
        copy_game(params)
        copy_icon(params)
    end

    private def compile_templates(params)
        compie_info_plist(params)
        compile_app_delegate(params)
        compile_web_game_controller_delegate(params)
        compile_podfile(params)
        compile_bridging_header(params)
        compile_fastlane_files(params)
        compile_plugins(params)
    end

    private def compile_plugins(params)
        compile_google_admob_plugin(params)
        compile_mintegral_plugin(params)
    end

    private def compile_google_admob_plugin(params)
        file_name = "GoogleAdmob"
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: target_file_path(params, "Plugins/Google Admob/#{file_name}.erb"),
            result_file_path: target_file_path(params, "Plugins/Google Admob/#{file_name}.swift"),
            input: PluginFileInput.new(params)
        )
    end

    private def compile_mintegral_plugin(params)
        compile_mintegral_video_plugin(params)
        compile_mintegral_banner_plugin(params)
    end

    private def compile_mintegral_video_plugin(params)
        file_name = "MintegralInterstitialVideoAd"
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: target_file_path(params, "Plugins/Mintegral/#{file_name}.erb"),
            result_file_path: target_file_path(params, "Plugins/Mintegral/#{file_name}.swift"),
            input: PluginFileInput.new(params)
        )
    end

    private def compile_mintegral_banner_plugin(params) {
        file_name = "MintegralBanner"
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: target_file_path(params, "Plugins/Mintegral/#{file_name}.erb"),
            result_file_path: target_file_path(params, "Plugins/Mintegral/#{file_name}.swift"),
            input: PluginFileInput.new(params)
        )
    }

    private def compile_fastlane_files(params)
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: fastlane_file_path(params, 'Appfile.erb'),
            result_file_path: fastlane_file_path(params, 'Appfile'),
            input: AppFileInput.new(params)
        )
    end

    private def fastlane_file_path(params, file)
        out_dir = params[:xcodeProjectDir]
        File.expand_path("fastlane/#{file}", out_dir)
    end

    private def compile_bridging_header(params)
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: target_file_path(params, 'AppBridgingHeader.erb'),
            result_file_path: target_file_path(params, 'AppBridgingHeader.h'),
            input: PofileInput.new(params)
        )
    end

    private def copy_template(params)
        out_dir = get_xcode_project_out_dir(params)
        templatePath = params[:templatePath]
        if !templatePath.nil?
            FileUtils.cp_r(templatePath, out_dir)
        end
    end

    private def delete_unused_plugins(params)
        input = PofileInput.new(params)
        if !input.google_ads
            plugin_path = target_file_path(params, 'Plugins/Google Admob')
            FileUtils.rm_rf(plugin_path)
        end

        if !input.mintegral_ads
            plugin_path = target_file_path(params, 'Plugins/Mintegral')
            FileUtils.rm_rf(plugin_path)
        end

        if !input.bytedance_ads
            plugin_path = target_file_path(params, 'Plugins/Bytedance')
            FileUtils.rm_rf(plugin_path)
        end
    end

    private def copy_game(params)
        game_src = params[:gameSrc]
        if !game_src.nil?
            FileUtils.cp_r(game_src, game_directory(params))
        end
    end

    private def compile_web_game_controller_delegate(params)
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: target_file_path(params, 'WebGameControllerDelegateImpl.erb'),
            result_file_path: target_file_path(params, 'WebGameControllerDelegateImpl.swift'),
            input: PofileInput.new(params)
        )
    end

    private def compile_app_delegate(params)
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: target_file_path(params, 'AppDelegate.erb'),
            result_file_path: target_file_path(params, 'AppDelegate.swift'),
            input: AppDelegateInput.new(params)
        )
    end

    private def target_file_path(params, file)
        out_dir = params[:xcodeProjectDir]
        File.expand_path("Game/#{file}", out_dir)
    end

    private def compie_info_plist(params)
        compiler = ERBCompiler.new()
        compiler.compile(
            erb_file_path: target_file_path(params, 'Info.erb'),
            result_file_path: target_file_path(params, 'Info.plist'),
            input: InfoPlistInput.new(params)
        )
    end

    private def copy_launch_image(params)
        if params.key?(:launchImageSrc)
            xcassets_path = target_file_path(params, 'Assets.xcassets')
            FileUtils.cp_r(params[:launchImageSrc], xcassets_path)
        end
    end

    private def copy_icon(params)
        if params.key?(:appiconsetSrc)
            xcassets_path = target_file_path(params, 'Assets.xcassets')
            FileUtils.cp_r(params[:appiconsetSrc], xcassets_path)
        end
    end

    private def install_pods(params)
        out_dir = get_xcode_project_out_dir(params)
        Dir.chdir(out_dir) do
            system("pod install")
        end
    end

    private def generate_xcode_project(params)
        out_dir = get_xcode_project_out_dir(params)
        text = generate_xcodgen_file_content(params)
        xcodegen_project_file_name = "project.yml"
        xcodegen_project_path = File.expand_path(xcodegen_project_file_name, out_dir)
        File.open(xcodegen_project_path, 'w') { |file| file.write(text) }
        Dir.chdir(out_dir) do
            system("xcodegen --spec #{xcodegen_project_file_name}")
            system("rm #{xcodegen_project_file_name}")
        end
    end

    private def generate_xcodgen_file_content(params)
        project_name = "Game"
        target_name = "Game"
        ios_sdk = params[:sdk]
        game_directory = File.basename(game_directory(params))
        target_src = "Game"
        dev_team_id = params[:developmentTeam]
        bundle_id = params[:bundleId]
        
        <<-YML_FILE
        name: #{project_name}
        targets:
            #{target_name}:
                type: application
                platform: iOS
                deploymentTarget: #{ios_sdk}
                sources:
                - path: #{target_src}
                - path: #{game_directory}
                  type: folder
                  name: html-game
                configFiles:
                    Debug: #{target_src}/debug.xcconfig
                    Release: #{target_src}/release.xcconfig
                attributes:
                    DevelopmentTeam: #{dev_team_id}
                settings:
                    base:
                        PRODUCT_BUNDLE_IDENTIFIER: #{bundle_id}
                        VERSIONING_SYSTEM: "apple-generic"
        YML_FILE
    end

    private def game_directory(params)
        File.expand_path("html-game", params[:xcodeProjectDir])
    end

    private def compile_podfile(params)
        xcodeProjectOutDir = get_xcode_project_out_dir(params)
        podfile_templatePath = File.expand_path("Podfile.erb", xcodeProjectOutDir)
        podfile_path = File.expand_path("Podfile", xcodeProjectOutDir)
        template_text = File.read(podfile_templatePath)
        renderer = ERB.new(template_text)
        result = renderer.result(PofileInput.new(params).get_binding)
        File.write(podfile_path, result)
        File.delete(podfile_templatePath)
    end

    private def get_xcode_project_out_dir(params)
        return params[:xcodeProjectDir]
    end
end


class XcodeProjecBuilder
  def build(params)
    Dir.chdir(params[:xcodeProjectDir]) do
      system("fastlane build_game")
    end
  end

  def upload(params)
    Dir.chdir(params[:xcodeProjectDir]) do
      system("fastlane upload_game")
    end
  end
end


class ScriptInputParser
    def initialize()
        @args = {}
        @opt_parser = OptionParser.new do |opts|
            opts.banner = "Usage: #{SCRIPT_NAME} [options]"
      
            opts.on("-cNAME", "--config=NAME", "Specify a custom config file, by default Game.yml is used") do |n|
              @args[:config] = n
            end
      
            opts.on("-g", "--generate", "Generates an xcode project") do |n|
              @args[:action] = :generate
            end
      
            opts.on("-u", "--upload", "Generates an xcode project, builds it and uploads the build to Testflight") do |n|
              @args[:action] = :upload
            end
      
            opts.on("-b", "--build", "Generates an xcode project and builds an ipa file") do |n|
              @args[:action] = :build
            end
      
            opts.on("-h", "--help", "Prints this help") do
              @args[:action] = :help
            end
        end
    end

  def parse(options)
    @opt_parser.parse!(options)
    @args
  end

  def print_help
    puts @opt_parser
  end
end


class ScriptInputProvider
    def initialize(parser)
        @parser = parser
        @arguments = @parser.parse(ARGV)
    end

    def get_coniguration_file_name
        if @arguments.key?(:config)
            @arguments[:config]
        else
            'Game.yml'
        end
    end

    def get_action
        if @arguments.key?(:action)
            @arguments[:action]
        else
            :generate
        end
    end
end


class BuildParamsLoader
    def load(input_provider)
        file_name = input_provider.get_coniguration_file_name
        check_yml_file_presence(file_name)
        file = File.open(file_name)
        yaml_file_content = YAML::load(file)
        params = yaml_file_content.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}
        params
    end

    private def check_yml_file_presence(file_name)
        if !File.exist?(file_name)
          puts "Configuration file #{file_name} was not found!"
          exit(-1)
        end
    end
end


class ConfigurationParamsProcessor
    def process(params)
        final_params = fill_in_empty_values(params)
        check_for_required_params(final_params)
        final_params
    end

    private def check_for_required_params(params)
        required_params = [
            :templatePath,
            :gameSrc,
            :bundleId,
            :version,
            :buildNumber,
            :appiconsetSrc
        ]

        required_params.each do | param|
            if !params.key?(param)
                puts("Missing '#{param}' in the configuration file")
                exit(-1)
            end
        end
    end

    private def fill_in_empty_values(params)
        default_values = {
            xcodeProjectDir: "Xcode Project",
            sdk: "8.0",
            developmentTeam: ""
        }
        default_values.each do |key, value|
            if !params.key?(key)
                params[key] = value
            end
        end
        params
    end
end

class Script
    def initialize()
        @builder = XcodeProjecBuilder.new
        @generator = XcodeProjectGenerator.new
        @params_loader = BuildParamsLoader.new
        @input_parser = ScriptInputParser.new
        @input_provider = ScriptInputProvider.new(@input_parser)
        @configuration_params_processor = ConfigurationParamsProcessor.new
    end

    def run()
        if @input_provider.get_action == :help
            @input_parser.print_help
            exit
        end

        loaded_params = @params_loader.load(@input_provider)
        final_params = @configuration_params_processor.process(loaded_params)

        if @input_provider.get_action == :generate
            @generator.regenerate(final_params)
        elsif @input_provider.get_action == :build
            @generator.regenerate(final_params)
            @builder.build(final_params)
        elsif @input_provider.get_action == :upload
            @generator.regenerate(final_params)
            @builder.upload(final_params)
        end
    end
end


script = Script.new
script.run()


