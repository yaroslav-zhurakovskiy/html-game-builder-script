import UIKit
import WebKit

protocol WebGameControllerDelegate: class {
    func webGameWilLoad(_ controller: WebGameController)
    func webGameConroller(_ controller: WebGameController, didReceiveRequest: SandboxObjectRequest)
    func viewWillTransition(_ view: UIView, to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator)
    func viewDidLayoutSubviews(_ view: UIView)
}

@objc(WebGameController)
class WebGameController: UIViewController {
    @IBOutlet weak var webView: WKWebView!
    
    private let rootURL: URL
    private let startingPage: String
    private let decompser = SandboxURLRequestDecomposer()
    
    weak var delegate: WebGameControllerDelegate?
    
    init(rootURL: URL, startingPage: String) {
        self.rootURL = rootURL
        self.startingPage = startingPage
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
   override func viewDidLoad() {
        super.viewDidLoad()
        
        webView.scrollView.isScrollEnabled = false
        webView.navigationDelegate = self
        webView.uiDelegate = self
        webView.configuration.preferences.setValue(true, forKey: "allowFileAccessFromFileURLs")
        webView.configuration.setValue(true, forKey: "allowUniversalAccessFromFileURLs");
        
        
        delegate?.webGameWilLoad(self)
        
        webView.loadFileURL(rootURL.appendingPathComponent(startingPage), allowingReadAccessTo: rootURL)
        
    <% if @autoshowBanner %>
        let request = SandboxObjectRequest(object: sandboxAdObjectSystemName, method: "showBanner", arguments: [:])
        delegate?.webGameConroller(self, didReceiveRequest: request)
    <% end %>
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        delegate?.viewWillTransition(view, to: size, with: coordinator)
    }

    override func viewDidLayoutSubviews() {
        delegate?.viewDidLayoutSubviews(view)
    }
}

extension WebGameController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
        print(error)
    }
    
    func webView(
        _ webView: WKWebView,
        decidePolicyFor navigationAction: WKNavigationAction,
        decisionHandler: @escaping (WKNavigationActionPolicy) -> Void
    ) {
        guard
            decompser.isSandboxRequest(navigationAction.request),
            let request = decompser.decomposeRequest(navigationAction.request)
        else {
            decisionHandler(.allow)
            return
        }

        delegate?.webGameConroller(self, didReceiveRequest: request)
        decisionHandler(.cancel)
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        
    }
    
    func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error) {
        print(error)
    }
}


extension WebGameController: WKUIDelegate {
    func webView(
        _ webView: WKWebView,
        runJavaScriptAlertPanelWithMessage message: String,
        initiatedByFrame frame: WKFrameInfo,
        completionHandler: @escaping () -> Void
    ) {
        let alert = UIAlertController(title: message, message: nil, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { _  in completionHandler() }))
        present(alert, animated: true, completion: nil)
    }
    
    func webView(
        _ webView: WKWebView,
        runJavaScriptConfirmPanelWithMessage message: String,
        initiatedByFrame frame: WKFrameInfo,
        completionHandler: @escaping (Bool) -> Void
    ) {
        let alert = UIAlertController(title: message, message: nil, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { _  in completionHandler(true) }))
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { _  in completionHandler(false) }))
        present(alert, animated: true, completion: nil)
    }
    
    func webView(
        _ webView: WKWebView,
        runJavaScriptTextInputPanelWithPrompt prompt: String,
        defaultText: String?,
        initiatedByFrame frame: WKFrameInfo,
        completionHandler: @escaping (String?) -> Void
    ) {
        let alert = UIAlertController(title: prompt, message: nil, preferredStyle: .alert)
        var promptTextField: UITextField?
        alert.addTextField { textField in
            promptTextField = textField
            promptTextField?.text = defaultText
        }
        alert.addAction(UIAlertAction(
            title: "OK",
            style: .default,
            handler: { _  in completionHandler(promptTextField?.text) }
        ))
        alert.addAction(UIAlertAction(
            title: "Cancel",
            style: .cancel,
            handler: { _  in completionHandler(nil) }
        ))
        present(alert, animated: true, completion: nil)
    }
}

extension WebGameController {
    func request(_ request: SandboxObjectRequest) {
        delegate?.webGameConroller(self, didReceiveRequest: request)
    }

    func request(url: URL) {
        let request = URLRequest(url: url)
        
        guard
            decompser.isSandboxRequest(request),
            let sandboxRequest = decompser.decomposeRequest(request)
        else {
            return
        }
        
        delegate?.webGameConroller(self, didReceiveRequest: sandboxRequest)
    }
}

extension WebGameController {
    struct CallbackName {
        let rawValue: String
        
        init(rawValue: String) {
            self.rawValue = rawValue
        }
        
        static let onShown = CallbackName(rawValue: "onShown")
        static let onFailed = CallbackName(rawValue: "onFailed")
        static let onReward = CallbackName(rawValue: "onReward")
    }
    
    func invokeCallback(withName name: CallbackName, param: Any? = nil) {
        let paramString: String
        if let param = param {
            paramString = "'\(encodeParam(param))'"
        } else {
            paramString = ""
        }
        
        
        webView.evaluateJavaScript("window.\(name.rawValue)(\(paramString));") { _, error in
            if let error = error {
                print("Invoke JS method failed:", error)
            }
        }
    }

    // Support for calling from Obj-C
    @objc func invokeCallbackWithName(_ name: String, param: Any? = nil) {
        invokeCallback(withName: CallbackName(rawValue: name), param: param)
    }
    
    private func encodeParam(_ param: Any) -> String {
        guard
            let data = try? JSONSerialization.data(withJSONObject: param, options: [])
        else {
            return ""
        }
        
        return data.base64EncodedString(options: [.endLineWithLineFeed])
    }
}
