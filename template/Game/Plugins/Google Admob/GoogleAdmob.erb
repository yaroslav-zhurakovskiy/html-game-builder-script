import UIKit

class GoogleAdmob: SandboxAdObject {
    <% if !@GADInterstitialAdUnitID.nil? %>
    private static let defaultInterstitialAdUnitID: String? = "<%= @GADInterstitialAdUnitID %>"
    <% else %>
    private static let defaultInterstitialAdUnitID: String? = nil
    <% end %>
    <% if !@GADBannerAdUnitID.nil? %>
    private static let defaultBannerAdUnitID: String? = "<%= @GADBannerAdUnitID %>"
    <% else %>
    private static let defaultBannerAdUnitID: String? = nil
    <% end %>
    <% if !@GADBannerPlacement.nil? %>
    private static let defaultBannerPlacement: BannerPlacement? = .<%= @GADBannerPlacement %>
    <% else %>
    private static let defaultBannerPlacement: BannerPlacement? = nil
    <% end %>
    
     <% if !@GADRewardedAdUnitID.nil? %>
    private static let defaultRewardedAdUnitID: String? = "<%= @GADRewardedAdUnitID %>"
    <% else %>
    private static let defaultRewardedAdUnitID: String? = nil
    <% end %>
    
    enum Method: String {
        case showInterstitial
        case initializeInterstitial
        case showBanner
        case showRewarded
    }

    enum Argument: String, Hashable {
        case adUnitID
        case placement
    }

    private let presenter = GoogleInterstitialPresenter()
    private let bannerPresenter = GoogleBannerPresenter()
    private let rewardedPresenter = GoogleRewardedBannerPresenter()

    func invoke(_ method: String, with args: [String : Any], from controller: WebGameController) {
        guard let result: (Method, [Argument: String]) = convertToTypedValues(method: method, arguments: args) else {
            return
        }

        let (method, input) = result

        switch method {
        case .initializeInterstitial:
            if let adUnitID = input[.adUnitID] {
                presenter.initialize(withAdUnitID: adUnitID)
            }
        case .showInterstitial:
            if let adUnitID = Self.defaultInterstitialAdUnitID {
                presenter.initialize(withAdUnitID: adUnitID)
            }
            presenter.present(from: controller)
        case .showBanner:
            if let adUnitID = input[.adUnitID] {
                bannerPresenter.present(
                    from: controller,
                    placement: resolvePlacement(input: input),
                    withAdUnitID: adUnitID
                )
            } else if let adUnit = Self.defaultBannerAdUnitID {
                bannerPresenter.present(
                    from: controller,
                    placement: resolvePlacement(input: input),
                    withAdUnitID: adUnit
                )
            }
        case .showRewarded:
            if let adUnitID = input[.adUnitID] {
                rewardedPresenter.present(from: controller, withAdUnitID: adUnitID)
            } else if let adUnitID = Self.defaultRewardedAdUnitID {
                rewardedPresenter.present(from: controller, withAdUnitID: adUnitID)
            }
        }
    }
    
    private func resolvePlacement(input: [Argument: String]) -> BannerPlacement {
        if let value = Self.defaultBannerPlacement {
            return value
        }
        
        guard let value = input[.placement] else {
            return .top
        }
        
        switch value {
        case "top":
            return .top
        case "bottom":
            return .bottom
        default:
            return .top
        }
    }
    
    func viewWillTransition(_ view: UIView, to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        bannerPresenter.viewWillTransition(view, to: size, with: coordinator)
    }
}
